[{"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/models/Exercise.ts":"1","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/models/User.ts":"2","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/repositories/ExerciseRepository.ts":"3","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/repositories/KnexInit.ts":"4","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/repositories/UserRepository.ts":"5","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/services/ExerciseService.ts":"6","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/services/UserService.ts":"7","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/DateUtils.ts":"8","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/Logger.ts":"9","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/Toggle.ts":"10","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/Validation.ts":"11","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/web/RouterController.ts":"12"},{"size":118,"mtime":1646116794247,"results":"13","hashOfConfig":"14"},{"size":57,"mtime":1647032353992,"results":"15","hashOfConfig":"14"},{"size":3233,"mtime":1647291379071,"results":"16","hashOfConfig":"14"},{"size":636,"mtime":1647109024657,"results":"17","hashOfConfig":"14"},{"size":1671,"mtime":1647290967227,"results":"18","hashOfConfig":"14"},{"size":2079,"mtime":1647291273145,"results":"19","hashOfConfig":"14"},{"size":930,"mtime":1647290765384,"results":"20","hashOfConfig":"14"},{"size":107,"mtime":1647290749987,"results":"21","hashOfConfig":"14"},{"size":1524,"mtime":1647291188060,"results":"22","hashOfConfig":"14"},{"size":148,"mtime":1647032752211,"results":"23","hashOfConfig":"14"},{"size":1309,"mtime":1647291262314,"results":"24","hashOfConfig":"14"},{"size":5383,"mtime":1647290461930,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ec8bq1",{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":6,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":1,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/models/Exercise.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/models/User.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/repositories/ExerciseRepository.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/repositories/KnexInit.ts",["65","66","67","68"],[],"import knex, { Knex } from 'knex';\n\nexport const knexConnection: Knex = knex({\n  client: 'mysql',\n  connection: {\n    host: process.env.MYSQL_HOST || 'localhost',\n    port: Number(process.env.MYSQL_PORT) || 3306,\n    user: process.env.MYSQL_USER || 'docker',\n    password: process.env.MYSQL_PASSWORD || 'mysql_very_secret_docker_password',\n    database: process.env.MYSQL_DATABASE || 'gridu'\n  }\n});\n\nknexConnection.raw('SELECT 1')\n  .then(() => {\n    console.log('Knex Initialization - MySQL connected.');\n  })\n  .catch((error: any) => {\n    console.log('Knex Initialization - MySQL not connected...');\n    console.error(error);\n  });\n","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/repositories/UserRepository.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/services/ExerciseService.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/services/UserService.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/DateUtils.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/Logger.ts",["69","70","71","72","73","74","75","76","77","78","79","80","81","82"],[],"import { isDebugOn } from './Toggle';\n\nexport const Log = () => {\n  return (target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => {\n    const targetMethod = descriptor.value;\n    const isDebug = isDebugOn();\n\n    if (isAsync(targetMethod)) {\n      descriptor.value = async <T> (...args: any[]): Promise<T> => {\n        const currentTime = Date.now();\n        const prefix = `${target.constructor.name} | ${propertyKey}`;\n        isDebug && console.log({ name: `Invocation of an async function | ${prefix}`, args });\n\n        const data = await targetMethod.apply(this, args);\n\n        const executionTime = `${Date.now() - currentTime}ms.`;\n        isDebug && console.log({\n          name: `Result of an async function invocation | ${prefix} | ${executionTime}`,\n          data\n        });\n        return data;\n      };\n    } else {\n      descriptor.value = <T> (...args: any[]): T => {\n        const currentTime = Date.now();\n        const prefix = `${target.constructor.name} | ${propertyKey}`;\n        isDebug && console.log({ name: `Invocation of a sync function | ${prefix}`, args });\n\n        const data = targetMethod.apply(this, args);\n\n        const executionTime = `${Date.now() - currentTime}ms.`;\n        isDebug && console.log({\n          name: `Result of a sync function invocation | ${prefix} | ${executionTime}`,\n          data\n        });\n        return data;\n      };\n    }\n\n    return descriptor;\n  };\n};\n\nconst isAsync = (fun: Function): boolean => /await/.test(fun.toString());\n","/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/Toggle.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/utils/Validation.ts",[],[],"/Users/dboisse/WebstormProjects/GridUNodeDawidBoisse/src/web/RouterController.ts",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102"],[],"import bodyParser from 'body-parser';\nimport express, { Express, Router } from 'express';\nimport { get } from 'lodash';\nimport { UserService } from '../services/UserService';\nimport { User } from '../models/User';\nimport { ExerciseService } from '../services/ExerciseService';\nimport { Exercise } from '../models/Exercise';\n\ntype FromToLimitType = {\n  from: string | undefined,\n  to: string | undefined,\n  limit: string | undefined\n};\n\nexport class RouterController {\n  constructor(\n    private readonly port: number = Number(process.env.HTTP_PORT) || 3000,\n    private readonly app: Express = express(),\n    private readonly router: Router = express.Router(),\n    private readonly userService: UserService = new UserService(),\n    private readonly exerciseService: ExerciseService = new ExerciseService()\n  ) {\n    this.router.get('/', this.homePage);\n    this.router.get('/api/users', this.getAllUsers);\n    this.router.post('/api/users', this.createUser);\n    this.router.get('/api/users/:id', this.getUserById);\n\n    this.router.post('/api/users/:id/exercises', this.createExercise);\n    this.router.get('/api/users/:id/logs', this.getUserExercises);\n    this.router.post('/api/users/:id/logs', this.getUserExercisesLog);\n\n    this.app.use(bodyParser.urlencoded({ extended: false }));\n    this.app.use(bodyParser.json());\n    this.app.use('/', this.router);\n  }\n\n  public start(): void {\n    this.app.listen(this.port, (): void => {\n      console.log(`Listening on port ${this.port}.`);\n    });\n  }\n\n  private readonly homePage = (request: any, response: any): void => {\n    try {\n      response.send({ message: 'Hello GridU!' });\n    } catch (error: any) {\n      response.statusCode = 400;\n      response.send();\n    }\n  };\n\n  private readonly getAllUsers = async (request: any, response: any): Promise<void> => {\n    try {\n      response.send(await this.userService.getAll());\n    } catch (error: any) {\n      response.statusCode = 400;\n      response.send();\n    }\n  };\n\n  private readonly getUserById = async (request: any, response: any): Promise<void> => {\n    try {\n      const { id } = request.params;\n      const theUser = await this.userService.getById(id);\n\n      if (theUser) {\n        response.send(theUser);\n      } else {\n        response.statusCode = 404;\n        response.send({\n          message: `User with id [${id}] doesn't exist.`,\n        });\n      }\n    } catch (error: any) {\n      response.statusCode = 400;\n      response.send({\n        message: 'Failed to get user.',\n        errorMessage: error.message\n      });\n    }\n  };\n\n  private readonly createUser = async (request: any, response: any): Promise<void> => {\n    try {\n      const savedUser: User = await this.userService.createUser(request.body as User);\n      if (savedUser) {\n        response.send(savedUser);\n      } else {\n        response.statusCode = 400;\n        response.send();\n      }\n    } catch (error: any) {\n      response.statusCode = 400;\n      response.send({\n        message: 'Failed to create user.',\n        errorMessage: error.message\n      });\n    }\n  };\n\n  private readonly createExercise = async (request: any, response: any): Promise<void> => {\n    try {\n      const { id } = request.params;\n      const user = await this.userService.getById(id);\n      if (!user) {\n        response.statusCode = 404;\n        response.send({\n          message: `User with id [${id}] doesn't exist.`,\n        });\n        return;\n      }\n\n      const exercise = request.body as Exercise;\n      exercise.userId = id;\n\n      const savedExercise = await this.exerciseService.createExercise(exercise);\n      response.send({\n        user,\n        exercise: savedExercise\n      });\n    } catch (error: any) {\n      response.statusCode = 400;\n      response.send({\n        message: 'Failed to create exercise.',\n        errorMessage: error.message\n      });\n    }\n  };\n\n  private readonly getUserExercises = async (request: any, response: any): Promise<void> => {\n    try {\n      const { id } = request.params;\n      const [user, exercises] = await Promise.all([\n        this.userService.getById(id),\n        this.exerciseService.getAllByUserId(id)\n      ]);\n\n      if (!user) {\n        response.statusCode = 404;\n        response.send({\n          message: `Cannot find user with id [${id}].`,\n        });\n        return;\n      }\n\n      response.send({ user, exercises });\n    } catch (error) {\n      response.statusCode = 400;\n      response.send({\n        message: 'Failed to get user\\'s exercises.',\n        errorMessage: get(error, 'message')\n      });\n    }\n  };\n\n  private readonly getUserExercisesLog = async (request: any, response: any): Promise<void> => {\n    try {\n      const { id } = request.params;\n      const { from, to, limit }: FromToLimitType = request.query;\n\n      if (!from && !to) {\n        const count = await this.exerciseService.getCountByUserId(id);\n        response.send({ count });\n        return;\n      }\n\n      const [count, exercises] = await Promise.all([\n        this.exerciseService.getCountFromToByUserId(id, from, to),\n        this.exerciseService.getByUserIdPaging(id, from, to, limit)\n      ]);\n\n      response.send({\n        count,\n        exercises\n      });\n    } catch (error) {\n      response.statusCode = 400;\n      response.send({\n        message: 'Failed to get user\\'s exercise.',\n        errorMessage: get(error, 'message')\n      });\n    }\n  };\n}\n",{"ruleId":"103","severity":1,"message":"104","line":16,"column":5,"nodeType":"105","messageId":"106","endLine":16,"endColumn":16},{"ruleId":"107","severity":1,"message":"108","line":18,"column":18,"nodeType":"109","messageId":"110","endLine":18,"endColumn":21,"suggestions":"111"},{"ruleId":"103","severity":1,"message":"104","line":19,"column":5,"nodeType":"105","messageId":"106","endLine":19,"endColumn":16},{"ruleId":"103","severity":1,"message":"104","line":20,"column":5,"nodeType":"105","messageId":"106","endLine":20,"endColumn":18},{"ruleId":"112","severity":2,"message":"113","line":3,"column":26,"nodeType":"114","messageId":"115","endLine":42,"endColumn":2,"fix":"116"},{"ruleId":"107","severity":1,"message":"108","line":4,"column":19,"nodeType":"109","messageId":"110","endLine":4,"endColumn":22,"suggestions":"117"},{"ruleId":"107","severity":1,"message":"108","line":4,"column":81,"nodeType":"109","messageId":"110","endLine":4,"endColumn":84,"suggestions":"118"},{"ruleId":"107","severity":1,"message":"108","line":9,"column":46,"nodeType":"109","messageId":"110","endLine":9,"endColumn":49,"suggestions":"119"},{"ruleId":"120","severity":2,"message":"121","line":12,"column":9,"nodeType":"122","messageId":"123","endLine":12,"endColumn":95},{"ruleId":"103","severity":1,"message":"104","line":12,"column":20,"nodeType":"105","messageId":"106","endLine":12,"endColumn":31},{"ruleId":"120","severity":2,"message":"121","line":17,"column":9,"nodeType":"122","messageId":"123","endLine":20,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":17,"column":20,"nodeType":"105","messageId":"106","endLine":17,"endColumn":31},{"ruleId":"107","severity":1,"message":"108","line":24,"column":40,"nodeType":"109","messageId":"110","endLine":24,"endColumn":43,"suggestions":"124"},{"ruleId":"120","severity":2,"message":"121","line":27,"column":9,"nodeType":"122","messageId":"123","endLine":27,"endColumn":93},{"ruleId":"103","severity":1,"message":"104","line":27,"column":20,"nodeType":"105","messageId":"106","endLine":27,"endColumn":31},{"ruleId":"120","severity":2,"message":"121","line":32,"column":9,"nodeType":"122","messageId":"123","endLine":35,"endColumn":12},{"ruleId":"103","severity":1,"message":"104","line":32,"column":20,"nodeType":"105","messageId":"106","endLine":32,"endColumn":31},{"ruleId":"125","severity":2,"message":"126","line":44,"column":23,"nodeType":"127","messageId":"128","endLine":44,"endColumn":31},{"ruleId":"103","severity":1,"message":"104","line":39,"column":7,"nodeType":"105","messageId":"106","endLine":39,"endColumn":18},{"ruleId":"107","severity":1,"message":"108","line":43,"column":41,"nodeType":"109","messageId":"110","endLine":43,"endColumn":44,"suggestions":"129"},{"ruleId":"107","severity":1,"message":"108","line":43,"column":56,"nodeType":"109","messageId":"110","endLine":43,"endColumn":59,"suggestions":"130"},{"ruleId":"107","severity":1,"message":"108","line":46,"column":21,"nodeType":"109","messageId":"110","endLine":46,"endColumn":24,"suggestions":"131"},{"ruleId":"107","severity":1,"message":"108","line":52,"column":50,"nodeType":"109","messageId":"110","endLine":52,"endColumn":53,"suggestions":"132"},{"ruleId":"107","severity":1,"message":"108","line":52,"column":65,"nodeType":"109","messageId":"110","endLine":52,"endColumn":68,"suggestions":"133"},{"ruleId":"107","severity":1,"message":"108","line":55,"column":21,"nodeType":"109","messageId":"110","endLine":55,"endColumn":24,"suggestions":"134"},{"ruleId":"107","severity":1,"message":"108","line":61,"column":50,"nodeType":"109","messageId":"110","endLine":61,"endColumn":53,"suggestions":"135"},{"ruleId":"107","severity":1,"message":"108","line":61,"column":65,"nodeType":"109","messageId":"110","endLine":61,"endColumn":68,"suggestions":"136"},{"ruleId":"107","severity":1,"message":"108","line":74,"column":21,"nodeType":"109","messageId":"110","endLine":74,"endColumn":24,"suggestions":"137"},{"ruleId":"107","severity":1,"message":"108","line":83,"column":49,"nodeType":"109","messageId":"110","endLine":83,"endColumn":52,"suggestions":"138"},{"ruleId":"107","severity":1,"message":"108","line":83,"column":64,"nodeType":"109","messageId":"110","endLine":83,"endColumn":67,"suggestions":"139"},{"ruleId":"107","severity":1,"message":"108","line":92,"column":21,"nodeType":"109","messageId":"110","endLine":92,"endColumn":24,"suggestions":"140"},{"ruleId":"107","severity":1,"message":"108","line":101,"column":53,"nodeType":"109","messageId":"110","endLine":101,"endColumn":56,"suggestions":"141"},{"ruleId":"107","severity":1,"message":"108","line":101,"column":68,"nodeType":"109","messageId":"110","endLine":101,"endColumn":71,"suggestions":"142"},{"ruleId":"107","severity":1,"message":"108","line":121,"column":21,"nodeType":"109","messageId":"110","endLine":121,"endColumn":24,"suggestions":"143"},{"ruleId":"107","severity":1,"message":"108","line":130,"column":55,"nodeType":"109","messageId":"110","endLine":130,"endColumn":58,"suggestions":"144"},{"ruleId":"107","severity":1,"message":"108","line":130,"column":70,"nodeType":"109","messageId":"110","endLine":130,"endColumn":73,"suggestions":"145"},{"ruleId":"107","severity":1,"message":"108","line":156,"column":58,"nodeType":"109","messageId":"110","endLine":156,"endColumn":61,"suggestions":"146"},{"ruleId":"107","severity":1,"message":"108","line":156,"column":73,"nodeType":"109","messageId":"110","endLine":156,"endColumn":76,"suggestions":"147"},"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["148","149"],"arrow-body-style","Unexpected block statement surrounding arrow body; move the returned value immediately after the `=>`.","ArrowFunctionExpression","unexpectedSingleBlock",{"range":"150","text":"151"},["152","153"],["154","155"],["156","157"],"no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression",["158","159"],"@typescript-eslint/ban-types","Don't use `Function` as a type. The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape.","Identifier","bannedTypeMessage",["160","161"],["162","163"],["164","165"],["166","167"],["168","169"],["170","171"],["172","173"],["174","175"],["176","177"],["178","179"],["180","181"],["182","183"],["184","185"],["186","187"],["188","189"],["190","191"],["192","193"],["194","195"],["196","197"],{"messageId":"198","fix":"199","desc":"200"},{"messageId":"201","fix":"202","desc":"203"},[64,1447],"(target: any, propertyKey: string, descriptor: TypedPropertyDescriptor<any>) => {\n    const targetMethod = descriptor.value;\n    const isDebug = isDebugOn();\n\n    if (isAsync(targetMethod)) {\n      descriptor.value = async <T> (...args: any[]): Promise<T> => {\n        const currentTime = Date.now();\n        const prefix = `${target.constructor.name} | ${propertyKey}`;\n        isDebug && console.log({ name: `Invocation of an async function | ${prefix}`, args });\n\n        const data = await targetMethod.apply(this, args);\n\n        const executionTime = `${Date.now() - currentTime}ms.`;\n        isDebug && console.log({\n          name: `Result of an async function invocation | ${prefix} | ${executionTime}`,\n          data\n        });\n        return data;\n      };\n    } else {\n      descriptor.value = <T> (...args: any[]): T => {\n        const currentTime = Date.now();\n        const prefix = `${target.constructor.name} | ${propertyKey}`;\n        isDebug && console.log({ name: `Invocation of a sync function | ${prefix}`, args });\n\n        const data = targetMethod.apply(this, args);\n\n        const executionTime = `${Date.now() - currentTime}ms.`;\n        isDebug && console.log({\n          name: `Result of a sync function invocation | ${prefix} | ${executionTime}`,\n          data\n        });\n        return data;\n      };\n    }\n\n    return descriptor;\n  }",{"messageId":"198","fix":"204","desc":"200"},{"messageId":"201","fix":"205","desc":"203"},{"messageId":"198","fix":"206","desc":"200"},{"messageId":"201","fix":"207","desc":"203"},{"messageId":"198","fix":"208","desc":"200"},{"messageId":"201","fix":"209","desc":"203"},{"messageId":"198","fix":"210","desc":"200"},{"messageId":"201","fix":"211","desc":"203"},{"messageId":"198","fix":"212","desc":"200"},{"messageId":"201","fix":"213","desc":"203"},{"messageId":"198","fix":"214","desc":"200"},{"messageId":"201","fix":"215","desc":"203"},{"messageId":"198","fix":"216","desc":"200"},{"messageId":"201","fix":"217","desc":"203"},{"messageId":"198","fix":"218","desc":"200"},{"messageId":"201","fix":"219","desc":"203"},{"messageId":"198","fix":"220","desc":"200"},{"messageId":"201","fix":"221","desc":"203"},{"messageId":"198","fix":"222","desc":"200"},{"messageId":"201","fix":"223","desc":"203"},{"messageId":"198","fix":"224","desc":"200"},{"messageId":"201","fix":"225","desc":"203"},{"messageId":"198","fix":"226","desc":"200"},{"messageId":"201","fix":"227","desc":"203"},{"messageId":"198","fix":"228","desc":"200"},{"messageId":"201","fix":"229","desc":"203"},{"messageId":"198","fix":"230","desc":"200"},{"messageId":"201","fix":"231","desc":"203"},{"messageId":"198","fix":"232","desc":"200"},{"messageId":"201","fix":"233","desc":"203"},{"messageId":"198","fix":"234","desc":"200"},{"messageId":"201","fix":"235","desc":"203"},{"messageId":"198","fix":"236","desc":"200"},{"messageId":"201","fix":"237","desc":"203"},{"messageId":"198","fix":"238","desc":"200"},{"messageId":"201","fix":"239","desc":"203"},{"messageId":"198","fix":"240","desc":"200"},{"messageId":"201","fix":"241","desc":"203"},{"messageId":"198","fix":"242","desc":"200"},{"messageId":"201","fix":"243","desc":"203"},{"messageId":"198","fix":"244","desc":"200"},{"messageId":"201","fix":"245","desc":"203"},{"messageId":"198","fix":"246","desc":"200"},{"messageId":"201","fix":"247","desc":"203"},{"messageId":"198","fix":"248","desc":"200"},{"messageId":"201","fix":"249","desc":"203"},"suggestUnknown",{"range":"250","text":"251"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"250","text":"252"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"253","text":"251"},{"range":"253","text":"252"},{"range":"254","text":"251"},{"range":"254","text":"252"},{"range":"255","text":"251"},{"range":"255","text":"252"},{"range":"256","text":"251"},{"range":"256","text":"252"},{"range":"257","text":"251"},{"range":"257","text":"252"},{"range":"258","text":"251"},{"range":"258","text":"252"},{"range":"259","text":"251"},{"range":"259","text":"252"},{"range":"260","text":"251"},{"range":"260","text":"252"},{"range":"261","text":"251"},{"range":"261","text":"252"},{"range":"262","text":"251"},{"range":"262","text":"252"},{"range":"263","text":"251"},{"range":"263","text":"252"},{"range":"264","text":"251"},{"range":"264","text":"252"},{"range":"265","text":"251"},{"range":"265","text":"252"},{"range":"266","text":"251"},{"range":"266","text":"252"},{"range":"267","text":"251"},{"range":"267","text":"252"},{"range":"268","text":"251"},{"range":"268","text":"252"},{"range":"269","text":"251"},{"range":"269","text":"252"},{"range":"270","text":"251"},{"range":"270","text":"252"},{"range":"271","text":"251"},{"range":"271","text":"252"},{"range":"272","text":"251"},{"range":"272","text":"252"},{"range":"273","text":"251"},{"range":"273","text":"252"},{"range":"274","text":"251"},{"range":"274","text":"252"},{"range":"275","text":"251"},{"range":"275","text":"252"},[529,532],"unknown","never",[84,87],[146,149],[312,315],[897,900],[1544,1547],[1559,1562],[1655,1658],[1779,1782],[1794,1797],[1903,1906],[2027,2030],[2042,2045],[2398,2401],[2606,2609],[2621,2624],[2903,2906],[3118,3121],[3133,3136],[3690,3693],[3911,3914],[3926,3929],[4613,4616],[4628,4631]]